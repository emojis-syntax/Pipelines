######################################################
Complete pipeline with all the information
######################################################
# Pipeline for US2020:

cd /disco2/keyphrase
./unzip.py -d /disco2/US2020/tweets
./proc_tweets.py -d /disco2/US2020/tweets
./ngo.sh /disco2/US2020/tweets
./creat_tw.py -d /disco2/US2020/tweets

#############################################################
# Restart ElasticSearch on Ubuntu

service elasticsearch restart

################################################################
# Allow an ElasticSearch scroll to live for 30 days. The default is 1 day (24h)
# https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-update-settings.html
#
# As I make a query to get all the records, this may cause a timeout.
# To do this, you need to use the scroll and timeout parameters in the "elasticsearch.helpers.scan" function
# https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html#scroll-search-context
# https://www.elastic.co/guide/en/elasticsearch/reference/current/common-options.html#time-units
# https://github.com/elastic/elasticsearch-dsl-py/issues/796
# https://stackoverflow.com/questions/33301119/error-with-elasticsearch-helpers-scan-api-when-using-query-parameter

curl -X PUT "localhost:9200/_cluster/settings" -H 'Content-Type: application/json' -d'
{
  "persistent" : {
    "search.max_keep_alive" : "30d"
  }
}
'
################################################################
### Delete previous records, if necessary
### curl -H "Content-Type: application/json" -XDELETE 127.0.0.1:9200/us2020

# Create the mapping
# Create a field in elasticsearch for searches by 24 different processors, to allow multiprocessing when loading neo4j
# Create a field in elasticsearch to process data for different days, from 1 to 31
# Create a field in elasticsearch to store the sum of emojis in the emojis array

curl -H "Content-Type: application/json" -XPUT 127.0.0.1:9200/us2020 -d '
{
	"mappings": {
		"properties": {
			"id_str": {"type": "long"}, 
			"created_at": {"type": "date"}, 
			"text": {"type": "text"}, 
			"emoji": {
				"type": "text", 
				"fields": { "keyword": { "type": "keyword" } }
			},
			"id24": {"type": "long"},
			"id31": {"type": "long"},
			"n_emoji": {"type": "long"}
		 }
	}
}
'

# Confirm the mapping
curl -H "Content-Type: application/json" -XGET '127.0.0.1:9200/us2020/_mapping?pretty'

mkdir /disco5/US2020
mkdir /disco5/US2020/tweets
rsync -zarv  --prune-empty-dirs --include "*/"  --include="*.tw" --exclude="*" "/disco2/US2020/tweets/" "/disco5/US2020/tweets/"

cd /disco2/keyphrase
./read2ES.py -i us2020 -d /disco5/US2020/tweets/2020-03
./read2ES.py -i us2020 -d /disco5/US2020/tweets/2020-04
./read2ES.py -i us2020 -d /disco5/US2020/tweets/2020-05
./read2ES.py -i us2020 -d /disco5/US2020/tweets/2020-06
./read2ES.py -i us2020 -d /disco5/US2020/tweets/2020-07
./read2ES.py -i us2020 -d /disco5/US2020/tweets/2020-08
./read2ES.py -i us2020 -d /disco5/US2020/tweets/2020-09
./read2ES.py -i us2020 -d /disco5/US2020/tweets/2020-10
./read2ES.py -i us2020 -d /disco5/US2020/tweets/2020-11
./read2ES.py -i us2020 -d /disco5/US2020/tweets/2020-12
./read2ES.py -i us2020 -d /disco5/US2020/tweets/2021-01


# Confirm insertion
curl -H "Content-Type: application/json" -XGET '127.0.0.1:9200/us2020/_count?pretty'
{
  "count" : 565891742,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  }
}


rm -r /disco5/US2020/

################################################################
# Create 31 groups - one for each day of the month - within the CLIMATE index, to then process each day separately
# Create 24 groups - one for each hour of the day - within the CLIMATE index, and then assign them to 24 processors
# It took 111261334 millis to update, there are 111261334 entries in elasticsearch
curl -X POST "localhost:9200/us2020/_update_by_query?pretty" -H 'Content-Type: application/json' -d'
{
"query": {"match_all": {}
         },
"script": "ctx._source.id31 = Integer.parseInt(ctx._source.created_at.substring(8,10)); ctx._source.id24 = Integer.parseInt(ctx._source.created_at.substring(11,13))"
}
'

#--------------------------------------------------------
# Monitor the evolution of previous code

# Count docs without id24
curl -X POST "localhost:9200/us2020/_count?pretty" -H 'Content-Type: application/json' -d'
{
"query": {
	"bool": {
		"must_not": [
			{
				"exists": {
					"field": "id24"
					}
				}
			]
		}	
	}
}
'

# Count docs with id24
curl -X POST "localhost:9200/us2020/_count?pretty" -H 'Content-Type: application/json' -d'
{
"query": {
	"bool": {
		"must": [
			{
				"exists": {
					"field": "id24"
					}
				}
			]
		}	
	}
}
'

######################################################
# Fill in the n_emoji field with the sum of the emojis in the document
# It took 113318102 milliseconds
curl -X POST "localhost:9200/us2020/_update_by_query?pretty" -H 'Content-Type: application/json' -d'
{
"query": {"match_all": {}
          },
"script": "ctx._source.n_emoji = ctx._source.emoji.length"
}
'

#---------------------------------------------------------------- -------
# Monitor the evolution of previous code

# Count docs without n_emoji
curl -X POST "localhost:9200/us2020/_count?pretty" -H 'Content-Type: application/json' -d'
{
"query": {
"bool": {
"must_not": [
{
"exists": {
"field": "n_emoji"
}
}
]
}
}
}
'

# Count docs with n_emoji
curl -X POST "localhost:9200/us2020/_count?pretty" -H 'Content-Type: application/json' -d'
{
"query": {
"bool": {
"must": [
{
"exists": {
"field": "n_emoji"
}
}
]
}
}
}
'

################################################ ####
# I have to increase the number of possible ES answers. I may have to do this several times until the command below stops giving an error.
curl -X PUT "localhost:9200/_settings" -H 'Content-Type: application/json' -d'
{
   "index.max_result_window": 2000000000
}
'

################################################ ####
# Launch neo4j:

/usr/local/neo4j/bin/neo4j console

# Put all emojis in Neo4j and MariaDB
# In Neo4j, add the property "n.us2020" to each emoji, with the number of occurrences of that emoji
cd /disco2/keyphrase
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 1
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 2
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 3
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 4
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 5
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 6
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 7
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 8
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 9
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 10
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 11
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 12
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 13
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 14
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 15
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 16
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 17
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 18
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 19
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 20
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 21
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 22
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 23
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 24
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 25
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 26
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 27
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 28
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 29
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 30
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 31

################################################################
# Times that the previous commands took:

./esPutEmojiNeo4jMariaDB.py -i us2020 -d 1
Total time 524.0086793899536 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 2
Total time 549.797525882721 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 3
Total time 604.8619668483734 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 4
Total time 583.5449759960175 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 5
Total time 634.753945350647 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 6
Total time 673.3427600860596 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 7
Total time 676.1539888381958 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 8
Total time 702.7459926605225 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 9
Total time 687.5718741416931 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 10
Total time 600.0039627552032 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 11
Total time 598.4575877189636 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 12
Total time 669.7126886844635 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 13
Total time 622.7115082740784 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 14
Total time 604.7141523361206 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 15
Total time 625.165253162384 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 16
Total time 633.1505966186523 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 17
Total time 546.8083322048187 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 18
Total time 610.1912748813629 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 19
Total time 703.3444950580597 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 20
Total time 697.0498812198639 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 21
Total time 852.0787239074707 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 22
Total time 704.1277415752411 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 23
Total time 673.0883655548096 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 24
Total time 660.3701913356781 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 25
Total time 682.9434351921082 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 26
Total time 721.9317672252655 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 27
Total time 645.0268754959106 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 28
Total time 686.5922384262085 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 29
Total time 714.1697084903717 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 30
Total time 697.9361577033997 seconds
./esPutEmojiNeo4jMariaDB.py -i us2020 -d 31
Total time 418.09304094314575 seconds

################################################################
# Confirm, in Neo4j
MATCH (n) RETURN SUM(n.us2020)
64615717

################################################ ##############
# Confirm, in MariaDB
MariaDB [emojis]> SELECT SUM(emp_count) FROM emoji_project JOIN project ON pro_id=emp_proid AND pro_name='us2020';
+----------------+
| SUM(emp_count) |
+----------------+
| 64615717 |
+----------------+
1 row in set (0.020 sec)

################################################ ####
# Pass co-occurrences to MariaDB
# For US2020, each day must be passed separately, as there is a lot of data

./esPutMariaDB.py -i us2020 -d 1
./esPutMariaDB.py -i us2020 -d 2
./esPutMariaDB.py -i us2020 -d 3
./esPutMariaDB.py -i us2020 -d 4
./esPutMariaDB.py -i us2020 -d 5
./esPutMariaDB.py -i us2020 -d 6
./esPutMariaDB.py -i us2020 -d 7
./esPutMariaDB.py -i us2020 -d 8
./esPutMariaDB.py -i us2020 -d 9
./esPutMariaDB.py -i us2020 -d 10
./esPutMariaDB.py -i us2020 -d 11
./esPutMariaDB.py -i us2020 -d 12
./esPutMariaDB.py -i us2020 -d 13
./esPutMariaDB.py -i us2020 -d 14
./esPutMariaDB.py -i us2020 -d 15
./esPutMariaDB.py -i us2020 -d 16
./esPutMariaDB.py -i us2020 -d 17
./esPutMariaDB.py -i us2020 -d 18
./esPutMariaDB.py -i us2020 -d 19
./esPutMariaDB.py -i us2020 -d 20
./esPutMariaDB.py -i us2020 -d 21
./esPutMariaDB.py -i us2020 -d 22
./esPutMariaDB.py -i us2020 -d 23
./esPutMariaDB.py -i us2020 -d 24
./esPutMariaDB.py -i us2020 -d 25
./esPutMariaDB.py -i us2020 -d 26
./esPutMariaDB.py -i us2020 -d 27
./esPutMariaDB.py -i us2020 -d 28
./esPutMariaDB.py -i us2020 -d 29
./esPutMariaDB.py -i us2020 -d 30
./esPutMariaDB.py -i us2020 -d 31

################################################ ##############
# Times that the previous commands took:

root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 1
Total time 301.3976092338562 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 2
Total time 270.16792607307434 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 3
Total time 302.64231729507446 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 4
Total time 292.0270264148712 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 5
Total time 546.275149345398 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 6
Total time 510.82914781570435 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 7
Total time 496.4820430278778 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 8
Total time 529.4271903038025 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 9
Total time 563.3655660152435 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 10
Total time 516.5716319084167 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 11
Total time 500.67135882377625 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 12
Total time 523.7002031803131 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 13
Total time 551.1335227489471 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 14
Total time 503.39229798316956 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 15
Total time 562.1520555019379 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 16
Total time 504.6462731361389 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 17
Total time 437.74174070358276 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 18
Total time 500.6225264072418 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 19
Total time 635.6069092750549 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 20
Total time 564.6695890426636 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 21
Total time 754.483068227768 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 22
Total time 599.4091122150421 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 23
Total time 605.7356870174408 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 24
Total time 519.2441697120667 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 25
Total time 622.4297454357147 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 26
Total time 667.6988909244537 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 27
Total time 587.0653192996979 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 28
Total time 630.9602696895599 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 29
Total time 611.1012859344482 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 30
Total time 608.0166425704956 seconds
root@alex:/disco2/keyphrase# ./esPutMariaDB.py -i us2020 -d 31
Total time 415.1829662322998 seconds

######################################################
# Confirm in MariaDB

SELECT COUNT(*) FROM follow WHERE fol_index='us2020';
+----------+
| COUNT(*) |
+----------+
| 16178541 |
+----------+
1 row in set (4,113 sec)


# After loading all the data into the FOLLOW table, run the following SQL:
UPDATE follow SET fol_hour=HOUR(fol_created_at) WHERE fol_hour IS NULL;
UPDATE follow SET fol_day=DAY(fol_created_at) WHERE fol_day IS NULL;

MariaDB [emojis]> UPDATE follow SET fol_hour=HOUR(fol_created_at) WHERE fol_hour IS NULL;
Query OK, 16178541 rows affected (11 min 35,367 sec)
Rows matched: 16178541 Changed: 16178541 Warnings: 0

MariaDB [emojis]> UPDATE follow SET fol_day=DAY(fol_created_at) WHERE fol_day IS NULL;
Query OK, 16178541 rows affected (14 min 32,094 sec)
Rows matched: 16178541 Changed: 16178541 Warnings: 0

################################################ ####
# Pass co-occurrences to neo4j

./mdbPutNeoFollow.py -i us2020
Total time 8428.553562402725 seconds

# Confirm that everything is ok in neo4j
MATCH (n)-[r:FOLLOWED_BY { index: "us2020" }]->(m) RETURN COUNT(r)
16178541

################################################ ####
# To add keyphrases to neo4j, in summary form for each co-occurrence
#-------------------------------------
# With MariaDB it seems to be faster
cd /disco2/keyphrase
./esPutMariaDBKeyphrase.py -i us2020
Total time 36132.35014295578 seconds

#-------------------------------------
# The previous procedure can be slow, so in MariaDB, you can follow the evolution:
# Number of entries in KEYPHRASE
SELECT COUNT(*) FROM keyphrase WHERE key_index='us2020';
+----------+
| COUNT(*) |
+----------+
| 386091 |
+----------+
1 row in set (0.000 sec)

# Number of entries already processed and already in PHRASE
SELECT COUNT(DISTINCT phr_keyid) FROM phrase WHERE phr_keyid IN (SELECT key_id FROM keyphrase WHERE key_index='us2020');

#----------------------------------------------
# Put the counts in key_count
# I had to do this, to have the count at hand, and not have to count at the moment
# This makes it easier to sort in descending counting order, particularly when searching between dates
# NOTE: this is the count of how many co-occurrences there are of a given pair of emojis (between two dates, or without date limit, depends on each case)
# NOTE2: I don't know if this particular script is prepared to work with dates - CONFIRM

./mdbPutKeyphraseCountByIndex.py -i us2020
Total time 1938.8801429271698 seconds

#--------------------------------------------------
# Pass Keyphrases from MariaDB to Neo4j

./mdbPutNeoKeyphrase.py -i us2020
Total time 414.82536149024963 seconds

################################################ ####
Place IDF fields in MariaDB's PHRASE table

./mdbPutIDF.py -i us2020
Total time 11930.00091958046 seconds

################################################ ####
# Update the phr_tfidf field

mysql
\remojis
UPDATE phrase SET phr_tfidf=phr_count*phr_idf WHERE phr_tfidf IS NULL;

MariaDB [emojis]> UPDATE phrase SET phr_tfidf=phr_count*phr_idf WHERE phr_tfidf IS NULL;
Query OK, 9323570 rows affected (1 min 7,118 sec)
Rows matched: 9323570 Changed: 9323570 Warnings: 0

#---------------------------------------------------------------- ---
# Same for the phr_weightidf field

mysql
\remojis
UPDATE phrase SET phr_weightidf=phr_weight*phr_idf WHERE phr_weightidf IS NULL;

MariaDB [emojis]> UPDATE phrase SET phr_weightidf=phr_weight*phr_idf WHERE phr_weightidf IS NULL;
Query OK, 9323570 rows affected (2 min 17,201 sec)
Rows matched: 9323570 Changed: 9323570 Warnings: 0

#--------------------------------------------------
# Pass Keyphrases from MariaDB to Neo4j - but now, ordered by phr_weightidf DESC

./mdbPutNeoIdfKeyphrase.py -i us2020
Total time 346.0654191970825 seconds

####################################################################################
# By date ranges
################################################ ################################

# To add keyphrases to neo4j, in summary form for each co-occurrence, but with date ranges

./esPutMariaDBKeyphraseDate.py -i us2020 -s 2020-12-31 -e 2021-01-07
Total time 583.6093194484711 seconds

./esPutMariaDBKeyphraseDate.py -i us2020 -s 2021-01-07 -e 2021-01-14
Total time 572.2244670391083 seconds

# Put the counts in key_count (now with dates)

./mdbPutKeyphraseCountByIndexByDate.py -i us2020
Total time 358.2126839160919 seconds

#--------------------------------------------------
# Pass Keyphrases from MariaDB to Neo4j - IDEM, BY DATES

./mdbPutNeoDateKeyphrase.py -i us2020 -s 2020-12-31 -e 2021-01-07
Total time 27.46297836303711 seconds

./mdbPutNeoDateKeyphrase.py -i us2020 -s 2021-01-07 -e 2021-01-14
Total time 26.035011053085327 seconds

#--------------------------------------------------
# Place the IDF fields in MariaDB's PHRASE table, but now with date ranges -->>
# ATTENTION, HERE IS A COMPLETE DATE BLOCK (includes BEFORE AND AFTER)

./mdbPutIDFByDate.py -i us2020 -s 2020-12-31 -e 2021-01-14
Total time 1803.0595660209656 seconds

#--------------------------------------------------
# Update the phr_tfidf field, created in the meantime

mysql
\remojis
UPDATE phrase SET phr_tfidf=phr_count*phr_idf WHERE phr_tfidf IS NULL;

MariaDB [emojis]> UPDATE phrase SET phr_tfidf=phr_count*phr_idf WHERE phr_tfidf IS NULL;
Query OK, 1006571 rows affected (21,270 sec)
Rows matched: 1006571 Changed: 1006571 Warnings: 0

#---------------------------------------------------------------- ---
# Same for the phr_weightidf field, created in the meantime

mysql
\remojis
UPDATE phrase SET phr_weightidf=phr_weight*phr_idf WHERE phr_weightidf IS NULL;

MariaDB [emojis]> UPDATE phrase SET phr_weightidf=phr_weight*phr_idf WHERE phr_weightidf IS NULL;
Query OK, 1006571 rows affected (30,566 sec)
Rows matched: 1006571 Changed: 1006571 Warnings: 0

#--------------------------------------------------
# Pass Keyphrases from MariaDB to Neo4j - IDEM, BY DATES - but now, ordered by phr_weightidf DESC

./mdbPutNeoDateIdfKeyphrase.py -i us2020 -s 2020-12-31 -e 2021-01-07
Total time 27.741098165512085 seconds

./mdbPutNeoDateIdfKeyphrase.py -i us2020 -s 2021-01-07 -e 2021-01-14
Total time 25.968322038650513 seconds

################################################ ################################
# Counts
################################################ ################################

################################################ ################################
# Count the total number of co-occurrences in ElasticSearch

cd /disco2/keyphrase
./esCountEmojiCO.py -i us2020 -o text
Total co-occurrences: 37975743
Total time 1398.8729367256165 seconds

################################################ ################################
# Count the total number of co-occurrences in Neo4j

#---------------------------------
# Total co-occurrences, excluding repetitions within the same tweet
#---------------------------------
MATCH (n)-[r:FOLLOWED_BY { index: "us2020" }]->(m) RETURN COUNT(r)
16178541

#---------------------------------
# Total co-occurrences, including repetitions within the same tweet
#---------------------------------
MATCH (n)-[r:FOLLOWED_BY { index: "us2020" }]->(m) RETURN SUM(r.count)
37975743

#---------------------------------
# Total co-occurrences, excluding repetitions. Only the number of co-occurrences, i.e., unique sequences of 2 emojis present in the dataset
#---------------------------------
MATCH (n)-[r:KEYPHRASES { index: "us2020" }]->(m) RETURN COUNT(r);
386091

####################################################################################
# Count the total number of co-occurrences in MariaDB

#---------------------------------
# Total co-occurrences, excluding repetitions within the same tweet
#---------------------------------

MariaDB [emojis]> SELECT COUNT(*) FROM follow WHERE fol_index='us2020';
+----------+
| COUNT(*) |
+----------+
| 16178541 |
+----------+
1 row in set (4,364 sec)

#---------------------------------
# Total co-occurrences, including repetitions within the same tweet
#---------------------------------

MariaDB [emojis]> SELECT SUM(fol_count) FROM follow WHERE fol_index='us2020';
+----------------+
| SUM(fol_count) |
+----------------+
| 37975743 |
+----------------+
1 row in set (37,951 sec)

#--------------------------
# For keyphrase table

MariaDB [emojis]> SELECT COUNT(*) FROM keyphrase WHERE key_index='us2020';
+----------+
| COUNT(*) |
+----------+
| 386091 |
+----------+


MariaDB [emojis]> SELECT COUNT(*) FROM phrase WHERE phr_keyid IN (SELECT key_id FROM keyphrase WHERE key_index='us2020');
+----------+
| COUNT(*) |
+----------+
| 9323570 |
+----------+
1 row in set (2,339 sec)


MATCH (n)-[r:KEYPHRASES { index: "us2020" }]->(m) RETURN COUNT(r);
386091

################################################ ################################
# emojis-co-occurrence-50-most-used (results are in a file with the name: emojis-co-occurrence-50-most-used.txt)

#-----------------------------------------------
# Indifferent
MATCH (n)-[r:FOLLOWED_BY { index: "us2020" }]->(m) RETURN n.emoji,n.name,m.emoji,m.name,SUM(r.count) ORDER BY SUM(r .count) DESC LIMIT 50;

#-----------------------------------------------
# With repetition
MATCH (n)-[r:FOLLOWED_BY { index: "us2020" }]->(m) WHERE n.emoji = m.emoji RETURN n.emoji,n.name,m.emoji,m.name,SUM(r .count) ORDER BY SUM(r.count) DESC LIMIT 50;

#-----------------------------------------------
# No repetition
MATCH (n)-[r:FOLLOWED_BY { index: "us2020" }]->(m) WHERE n.emoji <> m.emoji RETURN n.emoji,n.name,m.emoji,m.name,SUM( r.count) ORDER BY SUM(r.count) DESC LIMIT 50;

#-----------------------------------------------
# No repetition and independent of order
MATCH (n)-[r:FOLLOWED_BY { index: "us2020" }]-(m) WHERE n.emoji <> m.emoji AND ID(n) < ID(m) RETURN n.emoji,n.name,m .emoji,m.name,SUM(r.count) ORDER BY SUM(r.count) DESC LIMIT 50;


################################################ ######################
# Count number of tweets
################################################ ######################

#-------------------------------------------
# Original tweets, (no retweets or quoted tweets)
#-------------------------------------------
curl -H "Content-Type: application/json" -XGET '127.0.0.1:9200/us2020/_count?pretty' -d '
{
   "query": {
     "bool": {
       "must": [
         {
           "match": {
             "original_field": "text"
           }
         }
       ]
     }
   }
}
'
{
   "count" : 217922689,
   "_shards" : {
     "total" : 1,
     "successful" : 1,
     "skipped" : 0,
     "failed" : 0
   }
}

#-------------------------------------------
# All Tweets (comm retweets, and quoted tweets)
#-------------------------------------------
curl -H "Content-Type: application/json" -XGET '127.0.0.1:9200/us2020/_count?pretty'
{
   "count" : 565891742,
   "_shards" : {
     "total" : 1,
     "successful" : 1,
     "skipped" : 0,
     "failed" : 0
   }
}

########################################################################
# Count the total number of emojis
################################################ ######################

#-------------------------------------------
# Total number of emojis in all tweets (including text, rtext and qtext)
#-------------------------------------------
curl -H "Content-Type: application/json" -XGET '127.0.0.1:9200/us2020/_search?pretty' -d '
{
   "query": {"match_all": {}
   }
, "size": 0,
"aggs" : {
"sum": {
"sum": {"field" : "n_emoji"}
}
}
}
'
{
   "took" : 14400,
   "timed_out" : false,
   "_shards" : {
     "total" : 1,
     "successful" : 1,
     "skipped" : 0,
     "failed" : 0
   },
   "hits" : {
     "total" : {
       "value" : 10000,
       "relation" : "gte"
     },
     "max_score" : null,
     "hits" : [ ]
   },
   "aggregations" : {
     "sum" : {
       "value" : 1.29551604E8
     }
   }
}

#-------------------------------------------
# Total number of emojis in original tweets (text type only, excluding rtext and qtext)
#-------------------------------------------
curl -H "Content-Type: application/json" -XGET '127.0.0.1:9200/us2020/_search?pretty' -d '
{
   "query": {
     "bool": {
       "must": [
         {
           "match": {
             "original_field": "text"
           }
         }
       ]
     }
   }, "size": 0,
"aggs" : {
"sum": {
"sum": {"field" : "n_emoji"}
}
}
}
'
{
   "took" : 8022,
   "timed_out" : false,
   "_shards" : {
     "total" : 1,
     "successful" : 1,
     "skipped" : 0,
     "failed" : 0
   },
   "hits" : {
     "total" : {
       "value" : 10000,
       "relation" : "gte"
     },
     "max_score" : null,
     "hits" : [ ]
   },
   "aggregations" : {
     "sum" : {
       "value" : 6.4615717E7
     }
   }
}

#-------------------------------------------
# Confirmation in MariaDB
#-------------------------------------------
MariaDB [emojis]> SELECT SUM(emp_count) FROM emoji_project JOIN project ON emp_proid=pro_id WHERE pro_name='us2020';
+----------------+
| SUM(emp_count) |
+----------------+
| 64615717 |
+----------------+
1 row in set (0.014 sec)

################################################ ######################
# Maximum and minimum date of tweets
################################################ ######################

curl -X POST "localhost:9200/us2020/_search?size=0&pretty" -H 'Content-Type: application/json' -d'
{
"aggs" : {
        "min_date": {"min": {"field": "created_at"}},
        "max_date": {"max": {"field": "created_at"}}
     }
}
'
{
   "took" : 2449,
   "timed_out" : false,
   "_shards" : {
     "total" : 1,
     "successful" : 1,
     "skipped" : 0,
     "failed" : 0
   },
   "hits" : {
     "total" : {
       "value" : 10000,
       "relation" : "gte"
     },
     "max_score" : null,
     "hits" : [ ]
   },
   "aggregations" : {
     "max_date" : {
       "value" : 1.612137594E12,
       "value_as_string" : "2021-01-31T23:59:54.000Z"
     },
     "min_date" : {
       "value" : 1.583021148E12,
       "value_as_string" : "2020-03-01T00:05:48.000Z"
     }
   }
}


################################################ ######################
# Summary tables
################################################ ######################

#-------------------------------------------
# Prominent emojis - closeness
#-------------------------------------------
http://localhost/distance.php?index=us2020

#-------------------------------------------
# Top 50
#-------------------------------------------
http://localhost/top50.php?index=us2020

#-------------------------------------------
# Top 50 IDF
#-------------------------------------------
http://localhost/top50idf.php?index=us2020